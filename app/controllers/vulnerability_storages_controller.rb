class VulnerabilityStoragesController < Author::AuthorController
  before_action :set_vulnerability_storage, only: [:show, :edit, :update, :destroy]

  # GET /vulnerability_storages
  # GET /vulnerability_storages.json
  def index
    @site_storages = Author::SiteStorage.all
    @resource = {
        items: @site_storages.size,
        path: new_vulnerability_storage_path
    }
  end

  # GET /vulnerability_storages/1
  # GET /vulnerability_storages/1.json
  def show
  end

  # GET /vulnerability_storages/new
  def new
    @vulnerability_storage = VulnerabilityStorage.new
  end

  # GET /vulnerability_storages/1/edit
  def edit
  end

  # POST /vulnerability_storages
  # POST /vulnerability_storages.json
  def create
    @vulnerability_storage = VulnerabilityStorage.new(vulnerability_storage_params)

    respond_to do |format|
      if @vulnerability_storage.save
        format.html { redirect_to @vulnerability_storage, notice: 'Vulnerability storage was successfully created.' }
        format.json { render :show, status: :created, location: @vulnerability_storage }
      else
        format.html { render :new }
        format.json { render json: @vulnerability_storage.errors, status: :unprocessable_entity }
      end
    end
  end

  # PATCH/PUT /vulnerability_storages/1
  # PATCH/PUT /vulnerability_storages/1.json
  def update
    respond_to do |format|
      if @vulnerability_storage.update(vulnerability_storage_params)
        format.html { redirect_to @vulnerability_storage, notice: 'Vulnerability storage was successfully updated.' }
        format.json { render :show, status: :ok, location: @vulnerability_storage }
      else
        format.html { render :edit }
        format.json { render json: @vulnerability_storage.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /vulnerability_storages/1
  # DELETE /vulnerability_storages/1.json
  def destroy
    @vulnerability_storage.destroy
    respond_to do |format|
      format.html { redirect_to vulnerability_storages_url, notice: 'Vulnerability storage was successfully destroyed.' }
      format.json { head :no_content }
    end
  end

  private
  # Use callbacks to share common setup or constraints between actions.
  def set_vulnerability_storage
    @vulnerability_storage = VulnerabilityStorage.find(params[:id])
  end

  # Never trust parameters from the scary internet, only allow the white list through.
  def vulnerability_storage_params
    params[:vulnerability_storage]
  end

end
